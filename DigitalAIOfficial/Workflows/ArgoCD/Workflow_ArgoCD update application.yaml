---
apiVersion: xl-release/v1
kind: Templates
metadata:
  path: Workflows/ArgoCD
  home: Digital.ai - Official/Workflows/ArgoCD
spec:
- template: ArgoCD update application
  description: Update an application in ArgoCD
  scheduledStartDate: 2022-12-13T13:30:00+05:30
  dueDate: 2022-12-13T14:30:00+05:30
  phases:
  - phase: Application input
    tasks:
    - name: Check if remote runner exists
      type: xlrelease.ScriptTask
      script: |-
        def check_runners(runners):
          for runner in runners:
            if runner["enabled"] and "remote" in runner["capabilities"]:
              return True
          return False

        runners = configurationApi.searchByTypeAndTitle("xlrelease.JobRunner", "")

        if not check_runners(runners):
          raise Exception("There is no job runner with 'remote' capability enabled")
    - name: General information input
      type: xlrelease.UserInputTask
      description: "Input for ArgoCD API Server, Cluster where the application will\
        \ be deployed (namespace will be chosen later) & existing application name\
        \ which needs to be updated."
      variables:
      - argoCDApiServer
      - clusterUrl
      - applicationName
      - projectName
      - environmentTag
      - managedBy
    - name: Git repository input
      type: xlrelease.UserInputTask
      description: "Git input fields. You can change the repository, path and branch."
      variables:
      - gitRepo
      - path
      - revision
      - chart
    - name: Application information input
      type: xlrelease.UserInputTask
      description: Labels & sync policies.
      variables:
      - autoSync
      - prune
      - selfHeal
      - skipSchemaValidation
      - pruneLast
      - autoCreateNamespace
      - applyOutOfSyncOnly
      - prunePropagationPolicy
      - replace
    color: '#3d6c9e'
  - phase: Check if namespace exists
    tasks:
    - name: Namespace input
      type: xlrelease.UserInputTask
      description: |-
        This task involves providing the namespace in which the application will be deployed and run from. Additionally, you will need to provide the Kubernetes API server to connect to for deploying and managing the application.

        If you do not provide a namespace, the task will use the default value. Please ensure that the provided namespace is valid and appropriate for your application
      variables:
      - kubernetesApiServer
      - namespace
    - name: Check if namespace exists
      type: kubernetes.ExistsNamespace
      description: "Checks if '${namespace}' namespace already exists."
      variableMapping:
        server: "${kubernetesApiServer}"
        commandResponse: "${namespaceExistsResponse}"
      capabilities:
      - remote
      namespace: "${namespace}"
    color: '#3d6c9e'
  - phase: Create namespace
    tasks:
    - name: Create namespace
      type: kubernetes.CreateNamespace
      description: "Creates the ${namespace} namespace. If it already exists, this\
        \ task is skipped."
      precondition: |-
        import json

        result = (releaseVariables["namespaceExistsResponse"]["exists"] != "true")
      variableMapping:
        server: "${kubernetesApiServer}"
      capabilities:
      - remote
      namespace: "${namespace}"
    color: '#3d6c9e'
  - phase: Update ArgoCD application
    tasks:
    - name: Update ArgoCD application
      type: argocd.UpdateApplication
      variableMapping:
        skipValidation: "${skipSchemaValidation}"
        server: "${argoCDApiServer}"
        replace: "${replace}"
        autoSync: "${autoSync}"
        autoCreateNamespace: "${autoCreateNamespace}"
        pruneLast: "${pruneLast}"
        prunePropagationPolicy: "${prunePropagationPolicy}"
        pruneResources: "${prune}"
        selfHeal: "${selfHeal}"
        applyOutOfSyncOnly: "${applyOutOfSyncOnly}"
      capabilities:
      - remote
      appName: "${applicationName}"
      project: "${projectName}"
      url: "${gitRepo}"
      path: "${path}"
      chart: "${chart}"
      revision: "${revision}"
      cluster: "${clusterUrl}"
      namespace: "${namespace}"
    color: '#3d6c9e'
  - phase: Sync & Get status
    tasks:
    - name: Sync Application
      type: argocd.SyncApplication
      variableMapping:
        server: "${argoCDApiServer}"
      capabilities:
      - remote
      applicationName: "${applicationName}"
    - name: Get application status
      type: argocd.CheckApplicationStatus
      description: Checks if application is successfully updated.
      variableMapping:
        server: "${argoCDApiServer}"
      capabilities:
      - remote
      applicationName: "${applicationName}"
    color: '#3d6c9e'
  - phase: Update Managed Application
    tasks:
    - name: Update Application in Release
      type: managedApplications.UpdateApplication
      folderId: "${folderId}"
      applicationName: "${applicationName}"
      managedBy: "${managedBy}"
      environmentTag: "${environmentTag}"
      applicationReference: "${clusterUrl}"
      deleteWorkflowId: "${deleteWorkflowId}"
      updateWorkflowId: "${updateWorkflowId}"
      variableMapping:
        pythonScript.managedApplicationId: "${managedApplicationId}"
        pythonScript.connectionServer: "${argoCDApiServer}"
    color: '#3d6c9e'
  kind: WORKFLOW
  categories:
  - Application onboarding
  variables:
  - type: xlrelease.MapStringStringVariable
    key: namespaceExistsResponse
    requiresValue: false
    showOnReleaseStart: false
    value:
      exists: "false"
  - type: xlrelease.StringVariable
    key: gitRepo
    showOnReleaseStart: false
    label: Git Repo
    description: The URL of the Git repository where the application's manifests are
      stored.
  - type: xlrelease.StringVariable
    key: path
    showOnReleaseStart: false
    label: Path
    description: The directory or path in the Git repository where the application's
      manifests are located.
  - type: xlrelease.StringVariable
    key: revision
    showOnReleaseStart: false
    label: Revision
    description: The revision or branch in the Git repository to use for this application.
      Defaults to the latest commit in the default branch (HEAD).
    value: HEAD
  - type: xlrelease.StringVariable
    key: chart
    requiresValue: false
    showOnReleaseStart: false
    label: Helm chart
    description: Helm chart name
  - type: xlrelease.StringVariable
    key: clusterUrl
    showOnReleaseStart: false
    label: Cluster url
    description: Kubernetes cluster URL where the application should be deployed.
    value: https://kubernetes.default.svc
  - type: xlrelease.StringVariable
    key: projectName
    showOnReleaseStart: false
    label: Project name
    description: ArgoCD project name
    value: default
  - type: xlrelease.StringVariable
    key: namespace
    showOnReleaseStart: false
    label: Namespace
    description: The Kubernetes namespace where the application should be deployed.
      Keeping the old value keeps the application in the same namespace.
    value: default
  - type: xlrelease.StringVariable
    key: applicationName
    showOnReleaseStart: false
    label: Application name
    description: Existing application name in ArgoCD. Cannot be updated.
  - type: xlrelease.ReferenceVariable
    key: kubernetesApiServer
    showOnReleaseStart: false
    label: Kubernetes API server
    description: Kubernetes API server where ArgoCD is installed
    referencedType: kubernetes.APIServer
  - type: xlrelease.ReferenceVariable
    key: argoCDApiServer
    showOnReleaseStart: false
    label: ArgoCD API server
    description: ArgoCD API server where application will be deployed
    referencedType: argocd.APIServer
  - type: xlrelease.BooleanVariable
    key: autoSync
    requiresValue: false
    showOnReleaseStart: false
    label: Auto Sync
    description: "Controls the behavior of an automated sync. If left false, default\
      \ policy will be manual sync."
  - type: xlrelease.BooleanVariable
    key: prune
    requiresValue: false
    showOnReleaseStart: false
    label: Prune
    description: Prune specifies whether to delete resources from the cluster that
      are not found in the sources anymore as part of automated sync.
  - type: xlrelease.BooleanVariable
    key: selfHeal
    requiresValue: false
    showOnReleaseStart: false
    label: Self Heal
    description: SelfHeal specifies whether to revert resources back to their desired
      state upon modification in the cluster.
  - type: xlrelease.BooleanVariable
    key: skipSchemaValidation
    requiresValue: false
    showOnReleaseStart: false
    label: Skip schema validation
  - type: xlrelease.BooleanVariable
    key: pruneLast
    requiresValue: false
    showOnReleaseStart: false
    label: Prune last
  - type: xlrelease.BooleanVariable
    key: autoCreateNamespace
    requiresValue: false
    showOnReleaseStart: false
    label: Auto create namespace
  - type: xlrelease.BooleanVariable
    key: applyOutOfSyncOnly
    requiresValue: false
    showOnReleaseStart: false
    label: Apply out of sync only
  - type: xlrelease.StringVariable
    key: prunePropagationPolicy
    requiresValue: false
    showOnReleaseStart: false
    label: Prune Propagation Policy
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - foreground
      - background
      - orphan
    value: foreground
  - type: xlrelease.BooleanVariable
    key: replace
    requiresValue: false
    showOnReleaseStart: false
    label: Replace
    description: "Caution: Uses kubectl replace/create commands"
  - type: xlrelease.StringVariable
    key: managedApplicationId
    showOnReleaseStart: false
    label: Managed Application ID
    description: "ID of the Managed Application, its value should come when running\
      \ workflow as edit action from managed applications."
  - type: xlrelease.StringVariable
    key: environmentTag
    showOnReleaseStart: false
    label: Environment Tag
    description: "Marks how the application is managed, use Release value for apps\
      \ managed from Release"
    value: PROD
  - type: xlrelease.StringVariable
    key: managedBy
    showOnReleaseStart: false
    label: Managed by
    description: "Marks how the application is managed, use Release value for apps\
      \ managed from Release"
  - type: xlrelease.StringVariable
    key: updateWorkflowId
    requiresValue: false
    showOnReleaseStart: false
    label: Update Workflow CI ID
    description: CI ID of the the Update Workflow to be triggered as edit action from
      managed applicationsScript (this is set by template)
  - type: xlrelease.StringVariable
    key: deleteWorkflowId
    requiresValue: false
    showOnReleaseStart: false
    label: Delete Workflow CI ID
    description: CI ID of the the Delete Workflow to be triggered as delete action
      from managed applications (this is set by template)
  - type: xlrelease.StringVariable
    key: folderId
    label: Managed Application Folder
    description: "Folder where Managed Application is or should be located, if empty\
      \ release/workflow execution folder will be used"
    value: Release
  disableNotifications: true
  author: Digital.ai
  logo:
    type: xlrelease.TemplateLogo
    contentType: image/png
    file: !file "template-logo/d0b08f91372be0b47a2e02d0e536bc0a2c158f0b/argocd.svg"
  defaultTargetFolder: Digital.ai - Official/Workflow Executions
